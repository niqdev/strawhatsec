########## Overwriting the Global Offset Table ##########

* Since a program could use a function in a shared library many times,
  it's useful to have a table to reference all the functions.
* The procedure linkage table (PLT) section consists of many jump instructions,
  each one corresponding to the address of a function.
* Each time a shared function needs to be called, control will pass through the PLT.
* They aren't jumping to addresses but to pointers to addresses

objdump -d -M intel -j .plt ./fmt_vuln.out 

./fmt_vuln.out:     file format elf32-i386


Disassembly of section .plt:

08048330 <.plt>:
 8048330:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048336:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804833c:	00 00                	add    BYTE PTR [eax],al
	...

08048340 <printf@plt>:
 8048340:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048346:	68 00 00 00 00       	push   0x0
 804834b:	e9 e0 ff ff ff       	jmp    8048330 <.plt>

08048350 <strcpy@plt>:
 8048350:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048356:	68 08 00 00 00       	push   0x8
 804835b:	e9 d0 ff ff ff       	jmp    8048330 <.plt>

08048360 <puts@plt>:
 8048360:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048366:	68 10 00 00 00       	push   0x10
 804836b:	e9 c0 ff ff ff       	jmp    8048330 <.plt>

08048370 <exit@plt>:
 8048370:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018     ; 804a018 pointer to address
 8048376:	68 18 00 00 00       	push   0x18
 804837b:	e9 b0 ff ff ff       	jmp    8048330 <.plt>

08048380 <__libc_start_main@plt>:
 8048380:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 8048386:	68 20 00 00 00       	push   0x20
 804838b:	e9 a0 ff ff ff       	jmp    8048330 <.plt>

* the global offset table (GOT) is writable
* disply the dynamic relocation entries

objdump -R ./fmt_vuln.out 

./fmt_vuln.out:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE 
08049ffc R_386_GLOB_DAT    __gmon_start__
0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0
0804a010 R_386_JUMP_SLOT   strcpy@GLIBC_2.0
0804a014 R_386_JUMP_SLOT   puts@GLIBC_2.0
0804a018 R_386_JUMP_SLOT   exit@GLIBC_2.0                         ; 804a018
0804a01c R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0
